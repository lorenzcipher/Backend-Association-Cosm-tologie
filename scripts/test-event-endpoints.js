const BASE_URL = 'http://localhost:3000/api';

// Fonction pour tester les endpoints d'√©v√©nements
async function testEventEndpoints() {
  console.log('üß™ Test des endpoints d\'√©v√©nements...\n');

  try {
    // Test 1: Cr√©er un √©v√©nement (n√©cessite un token admin)
    console.log('1. Test de cr√©ation d\'√©v√©nement...');
    const createEventData = {
      title: 'Test Event',
      description: 'Description de l\'√©v√©nement test',
      startDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // Dans 7 jours
      endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000 + 2 * 60 * 60 * 1000), // +2h
      location: 'Paris, France',
      isOnline: false,
      isMemberOnly: false,
      maxParticipants: 50,
      registrationRequired: true,
      registrationDeadline: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // Dans 5 jours
      memberPrice: 25,
      nonMemberPrice: 35
    };

    const createResponse = await fetch(`${BASE_URL}/events`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // 'Authorization': 'Bearer YOUR_ADMIN_TOKEN' // √Ä remplacer par un vrai token
      },
      body: JSON.stringify(createEventData)
    });

    if (createResponse.ok) {
      const createdEvent = await createResponse.json();
      console.log('‚úÖ √âv√©nement cr√©√©:', createdEvent.data.title);
      
      const eventId = createdEvent.data._id;
      
      // Test 2: R√©cup√©rer l'√©v√©nement
      console.log('\n2. Test de r√©cup√©ration d\'√©v√©nement...');
      const getResponse = await fetch(`${BASE_URL}/events/${eventId}`);
      
      if (getResponse.ok) {
        const event = await getResponse.json();
        console.log('‚úÖ √âv√©nement r√©cup√©r√©:', event.data.title);
      } else {
        console.log('‚ùå Erreur lors de la r√©cup√©ration:', await getResponse.text());
      }

      // Test 3: Mettre √† jour l'√©v√©nement
      console.log('\n3. Test de mise √† jour d\'√©v√©nement...');
      const updateData = {
        title: 'Test Event Updated',
        description: 'Description mise √† jour',
        maxParticipants: 75
      };

      const updateResponse = await fetch(`${BASE_URL}/events/${eventId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer YOUR_ADMIN_TOKEN' // √Ä remplacer par un vrai token
        },
        body: JSON.stringify(updateData)
      });

      if (updateResponse.ok) {
        const updatedEvent = await updateResponse.json();
        console.log('‚úÖ √âv√©nement mis √† jour:', updatedEvent.data.title);
      } else {
        console.log('‚ùå Erreur lors de la mise √† jour:', await updateResponse.text());
      }

      // Test 4: Inscription √† l'√©v√©nement
      console.log('\n4. Test d\'inscription √† l\'√©v√©nement...');
      const registerResponse = await fetch(`${BASE_URL}/events/${eventId}/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer YOUR_USER_TOKEN' // √Ä remplacer par un vrai token utilisateur
        }
      });

      if (registerResponse.ok) {
        const registration = await registerResponse.json();
        console.log('‚úÖ Inscription r√©ussie');
      } else {
        console.log('‚ùå Erreur lors de l\'inscription:', await registerResponse.text());
      }

      // Test 5: D√©sinscription de l'√©v√©nement
      console.log('\n5. Test de d√©sinscription de l\'√©v√©nement...');
      const unregisterResponse = await fetch(`${BASE_URL}/events/${eventId}/register`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          // 'Authorization': 'Bearer YOUR_USER_TOKEN' // √Ä remplacer par un vrai token utilisateur
        }
      });

      if (unregisterResponse.ok) {
        console.log('‚úÖ D√©sinscription r√©ussie');
      } else {
        console.log('‚ùå Erreur lors de la d√©sinscription:', await unregisterResponse.text());
      }

      // Test 6: Supprimer l'√©v√©nement
      console.log('\n6. Test de suppression d\'√©v√©nement...');
      const deleteResponse = await fetch(`${BASE_URL}/events/${eventId}`, {
        method: 'DELETE',
        headers: {
          // 'Authorization': 'Bearer YOUR_ADMIN_TOKEN' // √Ä remplacer par un vrai token
        }
      });

      if (deleteResponse.ok) {
        console.log('‚úÖ √âv√©nement supprim√©');
      } else {
        console.log('‚ùå Erreur lors de la suppression:', await deleteResponse.text());
      }

    } else {
      console.log('‚ùå Erreur lors de la cr√©ation:', await createResponse.text());
    }

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
}

// Fonction pour tester la r√©cup√©ration de tous les √©v√©nements
async function testGetAllEvents() {
  console.log('\n7. Test de r√©cup√©ration de tous les √©v√©nements...');
  
  try {
    const response = await fetch(`${BASE_URL}/events`);
    
    if (response.ok) {
      const events = await response.json();
      console.log('‚úÖ √âv√©nements r√©cup√©r√©s:', events.data.events.length, '√©v√©nements trouv√©s');
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration:', await response.text());
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter les tests
async function runTests() {
  console.log('üöÄ D√©marrage des tests des endpoints d\'√©v√©nements\n');
  console.log('‚ö†Ô∏è  Note: Les tests n√©cessitent des tokens d\'authentification valides');
  console.log('‚ö†Ô∏è  Remplacez les commentaires Authorization par de vrais tokens\n');
  
  await testEventEndpoints();
  await testGetAllEvents();
  
  console.log('\n‚ú® Tests termin√©s!');
}

// Exporter pour utilisation dans d'autres scripts
module.exports = {
  testEventEndpoints,
  testGetAllEvents,
  runTests
};

// Ex√©cuter si le script est appel√© directement
if (require.main === module) {
  runTests();
}
